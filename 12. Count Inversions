#include <bits/stdc++.h> 

int merge(long long* arr, int l, int m, int r)
    {
         // Your code here
         int a=l,b=m+1;
         vector<int> v;
         int cnt=0;
         while(a<=m&&b<=r)
         {
             if(arr[a]<=arr[b])
             {
                 v.push_back(arr[a]);
                 a++;
             }
             else
             {
                 v.push_back(arr[b]);
                 cnt+=m-a+1;
                 b++;
             }
         }
         
         if(a<=m)
         {
             while(a<=m)
             {
                 v.push_back(arr[a]);
                 a++;
             }
         }
         else
         {
             while(b<=r)
             {
                 v.push_back(arr[b]);
                 b++;
             }
         }
         
         for(int i=l;i<=r;i++)
         {
             arr[i]=v[i-l];
         }

         return cnt;
    }
    
    int mergeSort(long long* arr, int l, int r)
    {
        //code here
        int ans=0;
        if(l>=r)
        {
            return 0;
        }
        
        int m=(l+r)/2;
        ans+=mergeSort(arr,l,m);
        ans+=mergeSort(arr,m+1,r);
        ans+=merge(arr,l,m,r);
        return ans;
    }

long long getInversions(long long *arr, int n){
    // Write your code here.
    int ans=mergeSort(arr,0,n-1);
    return ans;
    
}
