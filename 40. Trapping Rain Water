long long getTrappedWater(long long *arr, int n) {
  // Write your code here.

  // OPTIMAL- WITHOUT ADDITIONAL SPACE
  int leftmax=0,rightmax=0;
  int l=0,r=n-1;
  long long ans=0;
  while(l<=r)
  {
      if(arr[l]<=arr[r])
      {
          if(arr[l]>leftmax)
          {
              leftmax=arr[l];
          }
          else{
              ans+=leftmax-arr[l];
          }
          l++;
      }
      else{
          if(arr[r]>rightmax)
          {
              rightmax=arr[r];
          }
          else{
              ans+=rightmax-arr[r];
          }
          r--;
      }
  }
  return ans;
}


    //LOGIC- ANS=SUM(Min(Left_Max,Right_Max)-arr[i])

    /*vector<int> v1(n,0);
    vector<int> v2(n,0);

    int i;
    v1[0]=arr[0];
    v2[n-1]=arr[n-1];
   for(i=1;i<n;i++)
   {
       if(arr[i]>v1[i-1])
       {
           v1[i]=arr[i];
       } else {
         v1[i] = v1[i - 1];
       }

       if(arr[n-1-i]>v2[n-i])
       {
           v2[n-1-i]=arr[n-1-i];
       }
       else
       {
           v2[n-1-i]=v2[n-i];
       }
   }

    long long ans=0;
    for(i=1;i<n-1;i++)
    {
        if(min(v1[i-1],v2[i+1])-arr[i]>0)
        {
           ans+=min(v1[i-1],v2[i+1])-arr[i]; 
        } 
    }

    return ans;
    
}*/
