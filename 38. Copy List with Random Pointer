#include <bits/stdc++.h>

/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/

LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    // Write your code here.
    //WITHOUT USING EXTRA SPACE
    LinkedListNode<int> *p,*q;
    p=head;
    while(p!=NULL)
    {
         LinkedListNode<int> *copy=new LinkedListNode<int>(p->data);
         copy->next=p->next;
         p->next=copy;
         p=p->next->next;
    }

    p=head;
    while(p!=NULL)
    {
        if(p->random!=NULL)
        {
           (p->next)->random=(p->random)->next;
        }
        else{
            p->next->random=NULL;
        }
        p=p->next->next;
    }

    LinkedListNode<int> *curr;
    p=head;
    LinkedListNode<int>* dummy=new LinkedListNode<int>(0);
    curr=dummy;
    while(p!=NULL)
    {
        q=p->next->next;
        curr->next=p->next;
        p->next=q;
        p=p->next;
        curr=curr->next;
    }

    return dummy->next;




    //USING EXTRA SPACE
    /*unordered_map<LinkedListNode<int> *,LinkedListNode<int> *> m;
    LinkedListNode<int> *p=head;
    while(p!=NULL)
    {
        LinkedListNode<int>* copy=new LinkedListNode<int>(p->data);
        m[p]=copy;
        p=p->next;
    }

    p=head;
    while(p!=NULL)
    {
        m[p]->next=m[p->next];
        m[p]->random=m[p->random];
        p=p->next;
    }

    return m[head];*/
}
